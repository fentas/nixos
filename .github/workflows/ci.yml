name: Nix Flake CI

on:
  push:
    branches: [ "main" ]

  pull_request:
    branches: [ "main" ]

  # Schedule the update check (Runs ~Monday 08:00 UTC)
  schedule:
    - cron: '0 8 * * 1' # '*' for day means every day, '1' means Monday

  workflow_dispatch:

jobs:
  validate:
    name: Validate Flake Builds
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix (with Flakes enabled)
        uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            # Grant access to github.com assets using the default GITHUB_TOKEN
            # Needed for fetching flake inputs during build/evaluation
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Build NixOS Configuration
        # Builds the main system derivation. This serves as validation.
        # --show-trace provides detailed logs on error.
        # --print-build-logs shows build output (useful for debugging build failures).
        # We build the 'toplevel' system derivation to avoid check issues.
        run: nix build .#nixosConfigurations.dell-9510.config.system.build.toplevel --show-trace --print-build-logs

      - name: Build Home Manager Configuration
        # Also validates the home-manager configuration can be built.
        # 'activationPackage' is the typical output to build for HM.
        run: nix build .#homeConfigurations.fentas.activationPackage --show-trace --print-build-logs

  update:
    name: Update Flake Lock
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix (with Flakes enabled)
        uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Update flake.lock
        run: nix flake update

      - name: Create Pull Request if changes detected
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: Update flake inputs"
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          title: "Update Flake Inputs"
          body: |
            Automated update of flake inputs via GitHub Actions (`nix flake update`).

            Review changes in `flake.lock` and merge if desired.
          branch: "actions/flake-update"
          base: "main"
          assignees: fentas
          # labels: dependencies, automated-pr

    - name: Check Pull Request Output
      if: steps.create-pr.outputs.pull-request-number != ''
      run: |
        echo "Pull Request Number: ${{ steps.create-pr.outputs.pull-request-number }}"
        echo "Pull Request URL: ${{ steps.create-pr.outputs.pull-request-url }}"

